<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright (c) 2013-2022 ARM Limited. All rights reserved.

  SPDX-License-Identifier: Apache-2.0

  Licensed under the Apache License, Version 2.0 (the License); you may
  not use this file except in compliance with the License.
  You may obtain a copy of the License at

  www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an AS IS BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  $Date:         21. April 2022
  $Revision:     1.3.9

  Version 1.3.9:
  - add CM85 as enumerated value for cpuNameType.

  Version 1.3.8:
  - add SMC1 as enumerated value for cpuNameType.

  Version 1.3.7:
  - add CM55 as enumerated value for cpuNameType.
  
  Version 1.3.6:
  - add ARMV81MML as enumeration value for cpuNameType.
  
  Version 1.3.5:
  - add CM35P as enumeration value for cpuNameType.

  Version 1.3.4:
  - add dspPresent element to cpuType as SIMD instructions became optional for new processors.

  Version 1.3.3:
  - update file header to Apache 2.0 License
  - add dimableIdentifierType, as a copy of previous identifierType adding "%s",
  - update identifierType to only allow names without %s included.
  - remove enumerationNameType.
  - add headerEnumName to enumerationType and to dimArrayIndexType for peripheral arrays
    overwriting hierarchically generated names
  - add dimName to dimElementGroup. Only valid in <cluster> context, ignored otherwise.

  Version 1.3.2:
  adding dimIndexArray to peripheral-, cluster- and register-array to describe
  enumeration of array indices.

  Version 1.3.1:
  fixed peripheral name element type to identifierType to support %s for peripheral arrays
  added optional protection element to addressBlockType and added p=privileged

  Version 1.3:
  added dim to peripherals to describe an array of peripherals.
  added nesting of clusters to support hierarchical register structures.
  added protection element as part of the registerPropertiesGroup indicating
  special permissions are required for accessing a register.
  CPU Section extended with description of the Secure Attribution Unit.

  Version 1.2:
  Cortex-M7 support items have been added as optional tags for the device header file generation:
  fpuDP, icachePresent, dcachePresent, itcmPresent, dtcmPresent

  Version 1.1:
  For backward compatibility all additional tags have been made optional.
  Extensions may be mandatory for successful device header file generation
  Other changes are related to some restructuring of the schema.

  Note that the memory section has been removed since this would limit the
  reuse of descriptions for a series of devices.
 -->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="https://simple.example.com/" elementFormDefault="qualified" attributeFormDefault="qualified" version="1.3">
  <!-- stringType requires a none empty string of a least one character length -->
  <xsd:simpleType name="stringType">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="descriptionStringType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[\p{IsBasicLatin}\p{IsLatin-1Supplement}]*" />
    </xsd:restriction>
  </xsd:simpleType>

  <!-- cpuType specifies a selection of Cortex-M and Secure-Cores. This list will get extended as new processors are released -->
  <xsd:simpleType name="cpuNameType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="CM0"/>
      <xsd:enumeration value="CM0PLUS"/>
      <xsd:enumeration value="CM0+"/>
      <xsd:enumeration value="CM1"/>
      <xsd:enumeration value="CM3"/>
      <xsd:enumeration value="CM4"/>
      <xsd:enumeration value="CM7"/>
      <xsd:enumeration value="CM23"/>
      <xsd:enumeration value="CM33"/>
      <xsd:enumeration value="CM35P"/>
      <xsd:enumeration value="CM55"/>
      <xsd:enumeration value="CM85"/>
      <xsd:enumeration value="SC000"/>
      <xsd:enumeration value="SC300"/>
      <xsd:enumeration value="ARMV8MML"/>
      <xsd:enumeration value="ARMV8MBL"/>
      <xsd:enumeration value="ARMV81MML"/>
      <xsd:enumeration value="CA5"/>
      <xsd:enumeration value="CA7"/>
      <xsd:enumeration value="CA8"/>
      <xsd:enumeration value="CA9"/>
      <xsd:enumeration value="CA15"/>
      <xsd:enumeration value="CA17"/>
      <xsd:enumeration value="CA53"/>
      <xsd:enumeration value="CA57"/>
      <xsd:enumeration value="CA72"/>
      <xsd:enumeration value="SMC1"/>
      <xsd:enumeration value="other"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- revisionType specifies the CPU revision format as defined by ARM (rNpM) -->
  <xsd:simpleType name="revisionType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="r[0-9]*p[0-9]*"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- EndianType pre-defines the tokens for specifying the endianess of the device -->
  <xsd:simpleType name="endianType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="little"/>
      <xsd:enumeration value="big"/>
      <xsd:enumeration value="selectable"/>
      <xsd:enumeration value="other"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- dataType pre-defines the tokens in line with CMSIS data type definitions -->
  <xsd:simpleType name="dataTypeType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="uint8_t"/>
      <xsd:enumeration value="uint16_t"/>
      <xsd:enumeration value="uint32_t"/>
      <xsd:enumeration value="uint64_t"/>
      <xsd:enumeration value="int8_t"/>
      <xsd:enumeration value="int16_t"/>
      <xsd:enumeration value="int32_t"/>
      <xsd:enumeration value="int64_t"/>
      <xsd:enumeration value="uint8_t *"/>
      <xsd:enumeration value="uint16_t *"/>
      <xsd:enumeration value="uint32_t *"/>
      <xsd:enumeration value="uint64_t *"/>
      <xsd:enumeration value="int8_t *"/>
      <xsd:enumeration value="int16_t *"/>
      <xsd:enumeration value="int32_t *"/>
      <xsd:enumeration value="int64_t *"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- dimableIdentifierType specifies the subset and sequence of characters used for specifying identifiers that may contain %s from dim. -->
  <!-- this is particularly important as these are used in ANSI C Structures during the device header file generation -->
  <xsd:simpleType name="dimableIdentifierType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="((%s)|(%s)[_A-Za-z]{1}[_A-Za-z0-9]*)|([_A-Za-z]{1}[_A-Za-z0-9]*(\[%s\])?)|([_A-Za-z]{1}[_A-Za-z0-9]*(%s)?[_A-Za-z0-9]*)"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- identifierType specifies the subset and sequence of characters used for specifying identifiers that must not contain %s from dim. -->
  <!-- this is particularly important as these are used in ANSI C Structures during the device header file generation -->
  <xsd:simpleType name="identifierType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[_A-Za-z0-9]*"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- V1.3: Protection Access Attribute Strings -->
  <xsd:simpleType name="protectionStringType">
    <xsd:restriction base="xsd:string">
      <!-- s = Secure                      -->
      <!-- n = Non-secure                  -->
      <!-- p = Privileged                  -->
      <xsd:pattern value="[snp]"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- V1.3: SAU Access Type -->
  <xsd:simpleType name="sauAccessType">
    <xsd:restriction base="xsd:string">
      <!-- c = non-secure Callable / Secure -->
      <!-- n = Non-secure                   -->
      <xsd:pattern value="[cn]"/>
    </xsd:restriction>
  </xsd:simpleType>

  <!-- dimIndexType specifies the subset and sequence of characters used for specifying the sequence of indices in register arrays -->
  <xsd:simpleType name="dimIndexType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[0-9]+\-[0-9]+|[A-Z]-[A-Z]|[_0-9a-zA-Z]+(,\s*[_0-9a-zA-Z]+)+"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- scaledNonNegativeInteger specifies the format in which numbers are represented in hexadecimal or decimal format -->
  <xsd:simpleType name="scaledNonNegativeInteger">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[+]?(0x|0X|#)?[0-9a-fA-F]+[kmgtKMGT]?"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- enumeratedValueDataType specifies the number formats for the values in enumeratedValues -->
  <xsd:simpleType name="enumeratedValueDataType">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[+]?(((0x|0X)[0-9a-fA-F]+)|([0-9]+)|((#|0b)[01xX]+))"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- accessType specfies the pre-defined tokens for the available accesses -->
  <xsd:simpleType name="accessType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="read-only"/>
      <xsd:enumeration value="write-only"/>
      <xsd:enumeration value="read-write"/>
      <xsd:enumeration value="writeOnce"/>
      <xsd:enumeration value="read-writeOnce"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- modifiedWriteValuesType specifies the pre-defined tokens for the write side effects -->
  <xsd:simpleType name="modifiedWriteValuesType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="oneToClear"/>
      <xsd:enumeration value="oneToSet"/>
      <xsd:enumeration value="oneToToggle"/>
      <xsd:enumeration value="zeroToClear"/>
      <xsd:enumeration value="zeroToSet"/>
      <xsd:enumeration value="zeroToToggle"/>
      <xsd:enumeration value="clear"/>
      <xsd:enumeration value="set"/>
      <xsd:enumeration value="modify"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- readAction type specifies the pre-defined tokens for read side effects -->
  <xsd:simpleType name="readActionType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="clear"/>
      <xsd:enumeration value="set"/>
      <xsd:enumeration value="modify"/>
      <xsd:enumeration value="modifyExternal"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- enumUsageType specifies the pre-defined tokens for selecting what access types an enumeratedValues set is associated with -->
  <xsd:simpleType name="enumUsageType">
    <xsd:restriction base="xsd:token">
      <xsd:enumeration value="read"/>
      <xsd:enumeration value="write"/>
      <xsd:enumeration value="read-write"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- bitRangeType specifies the bit numbers to be restricted values from 0 - 69 -->
  <xsd:simpleType name="bitRangeType">
    <xsd:restriction base="xsd:token">
      <xsd:pattern value="\[([0-4])?[0-9]:([0-4])?[0-9]\]"/>
    </xsd:restriction>
  </xsd:simpleType>
  <!-- writeContraintType specifies how to describe the restriction of the allowed values that can be written to a resource -->
  <xsd:complexType name="writeConstraintType">
    <xsd:choice>
      <xsd:element name="writeAsRead" type="xsd:boolean"/>
      <xsd:element name="useEnumeratedValues" type="xsd:boolean"/>
      <xsd:element name="range">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="minimum" type="scaledNonNegativeInteger"/>
            <xsd:element name="maximum" type="scaledNonNegativeInteger"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:choice>
  </xsd:complexType>
  <!-- addressBlockType specifies the elements to describe an address block -->
  <xsd:complexType name="addressBlockType">
    <xsd:sequence>
      <xsd:element name="offset" type="scaledNonNegativeInteger"/>
      <xsd:element name="size" type="scaledNonNegativeInteger"/>
      <xsd:element name="usage">
        <xsd:simpleType>
          <xsd:restriction base="xsd:token">
            <xsd:enumeration value="registers"/>
            <xsd:enumeration value="buffer"/>
            <xsd:enumeration value="reserved"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <!-- Version 1.3.2: optional access protection for an address block s=secure n=non-secure p=privileged -->
      <xsd:element name="protection" type="protectionStringType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <!-- interruptType specifies how to describe an interrupt associated with a peripheral -->
  <xsd:complexType name="interruptType">
    <xsd:sequence>
      <xsd:element name="name" type="stringType"/>
      <xsd:element name="description" type="xsd:string" minOccurs="0"/>
      <xsd:element name="value" type="xsd:integer"/>
    </xsd:sequence>
  </xsd:complexType>
  <!-- register properties group specifies register size, access permission and reset value
       this is used in multiple locations. Settings are inherited downstream. -->
  <xsd:group name="registerPropertiesGroup">
    <xsd:sequence>
      <xsd:element name="size" type="scaledNonNegativeInteger" minOccurs="0"/>
      <xsd:element name="access" type="accessType" minOccurs="0"/>
      <!-- V 1.3: extended register access protection -->
      <xsd:element name="protection" type="protectionStringType" minOccurs="0"/>
      <xsd:element name="resetValue" type="scaledNonNegativeInteger" minOccurs="0"/>
      <xsd:element name="resetMask" type="scaledNonNegativeInteger" minOccurs="0"/>
    </xsd:sequence>
  </xsd:group>
  <!-- bitRangeLsbMsbStyle specifies the bit position of a field within a register
       by specifying the least significant and the most significant bit position -->
  <xsd:group name="bitRangeLsbMsbStyle">
    <xsd:sequence>
      <xsd:element name="lsb"  type="scaledNonNegativeInteger"/>
      <xsd:element name="msb"  type="scaledNonNegativeInteger"/>
    </xsd:sequence>
  </xsd:group>
  <!-- bitRangeOffsetWidthStyle specifies the bit position of a field within a register
       by specifying the least significant bit position and the bitWidth of the field -->
  <xsd:group name="bitRangeOffsetWidthStyle">
    <xsd:sequence>
      <xsd:element name="bitOffset" type="scaledNonNegativeInteger"/>
      <xsd:element name="bitWidth" type="scaledNonNegativeInteger" minOccurs="0"/>
    </xsd:sequence>
  </xsd:group>

  <!-- dimElementGroup specifies the number of array elements (dim), the address offset
       between to consecutive array elements and an a comma seperated list of strings
       being used for identifying each element in the array -->
  <xsd:group name="dimElementGroup">
    <xsd:sequence>
      <xsd:element name="dim" type="scaledNonNegativeInteger"/>
      <xsd:element name="dimIncrement" type="scaledNonNegativeInteger"/>
      <xsd:element name="dimIndex" type="dimIndexType" minOccurs="0"/>
      <xsd:element name="dimName" type="identifierType" minOccurs="0"/>
      <xsd:element name="dimArrayIndex" type="dimArrayIndexType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:group>

  <xsd:complexType name="cpuType">
    <xsd:sequence>
      <!-- V1.1: ARM processor name: Cortex-Mx / SCxxx -->
      <xsd:element name="name" type="cpuNameType"/>
      <!-- V1.1: ARM defined revision of the cpu -->
      <xsd:element name="revision" type="revisionType"/>
      <!-- V1.1: Endian specifies the endianess of the processor/device -->
      <xsd:element name="endian" type="endianType"/>
      <!-- V1.1: mpuPresent specifies whether or not a memory protection unit is physically present -->
      <xsd:element name="mpuPresent" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.1: fpuPresent specifies whether or not a floating point hardware unit is physically present -->
      <xsd:element name="fpuPresent" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.2: fpuDP specifies a double precision floating point hardware unit is physically present-->
      <xsd:element name="fpuDP" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.3: dspPresent specifies whether the optional SIMD instructions are supported by processor -->
      <xsd:element name="dspPresent" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.2: icachePresent specifies that an instruction cache is physically present-->
      <xsd:element name="icachePresent" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.2: dcachePresent specifies that a data cache is physically present-->
      <xsd:element name="dcachePresent" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.2: itcmPresent specifies that an instruction tightly coupled memory is physically present-->
      <xsd:element name="itcmPresent" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.2: dtcmPresent specifies that an data tightly coupled memory is physically present-->
      <xsd:element name="dtcmPresent" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.1: vtorPresent is used for Cortex-M0+ based devices only. It indicates whether the Vector -->
      <!--       Table Offset Register is implemented in the device or not                              -->
      <xsd:element name="vtorPresent" type="xsd:boolean" minOccurs="0"/>
      <!-- V1.1: nvicPrioBits specifies the number of bits used by the Nested Vectored Interrupt Controller -->
      <!--       for defining the priority level = # priority levels                                        -->
      <xsd:element name="nvicPrioBits" type="scaledNonNegativeInteger"/>
      <!-- V1.1: vendorSystickConfig is set true if a custom system timer is implemented in the device -->
      <!--       instead of the ARM specified SysTickTimer                                             -->
      <xsd:element name="vendorSystickConfig" type="xsd:boolean"/>
      <!-- V1.3: reports the total number of interrupts implemented by the device (optional) -->
      <xsd:element name="deviceNumInterrupts" type="scaledNonNegativeInteger" minOccurs="0"/>
      <!-- V1.3: sauRegions specifies the available number of address regions -->
      <!--       if not specified a value of zero is assumed                  -->
      <xsd:element name="sauNumRegions" type="scaledNonNegativeInteger" minOccurs="0"/>
      <!-- V1.3: SAU Regions Configuration (if fully or partially predefined) -->
      <xsd:element name="sauRegionsConfig" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="region" minOccurs="0" maxOccurs="unbounded">
              <!-- addressBlockType specifies the elements to describe an address block -->
              <xsd:complexType>
                <xsd:sequence minOccurs="1"   maxOccurs="unbounded">
                  <xsd:element name="base"    type="scaledNonNegativeInteger"/>
                  <xsd:element name="limit"   type="scaledNonNegativeInteger"/>
                  <xsd:element name="access"  type="sauAccessType"/>
                </xsd:sequence>
                <xsd:attribute name="enabled" type="xsd:boolean" use="optional" default="true"/>
                <xsd:attribute name="name"    type="xsd:string"  use="optional"/>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
          <xsd:attribute name="enabled" type="xsd:boolean" use="optional" default="true"/>
          <xsd:attribute name="protectionWhenDisabled" type="protectionStringType" use="optional" default="s"/>
        </xsd:complexType>
      </xsd:element>
     </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="enumeratedValueType">
    <xsd:sequence>
      <!-- name is a ANSI C indentifier representing the value (C Enumeration) -->
      <xsd:element name="name" type="identifierType"/>
      <!-- description contains the details about the semantics/behavior specified by this value -->
      <xsd:element name="description" type="stringType" minOccurs="0"/>
      <xsd:choice>
        <xsd:element name="value" type="enumeratedValueDataType"/>
        <!-- isDefault specifies the name and description for all values that are not
             specifically described individually -->
        <xsd:element name="isDefault" type="xsd:boolean"/>
      </xsd:choice>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="enumerationType">
    <xsd:sequence>
      <!-- name specfies a reference to this enumeratedValues section for reuse purposes
           this name does not appear in the System Viewer nor the Header File. -->
      <xsd:element name="name" type="identifierType" minOccurs="0"/>
      <!-- overrides the hierarchical enumeration type in the device header file. User is responsible for uniqueness across description -->
      <xsd:element name="headerEnumName" type="identifierType" minOccurs="0"/>
      <!-- usage specifies whether this enumeration is to be used for read or write or
                                                       (read and write) accesses -->
      <xsd:element name="usage" type="enumUsageType" minOccurs="0"/>
      <!-- enumeratedValue derivedFrom=<identifierType> -->
      <xsd:element name="enumeratedValue" type="enumeratedValueType" minOccurs="1" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="derivedFrom" type="identifierType" use="optional"/>
  </xsd:complexType>

  <xsd:complexType name="dimArrayIndexType">
    <xsd:sequence>
      <xsd:element name="headerEnumName" type="identifierType" minOccurs="0"/>
      <xsd:element name="enumeratedValue" type="enumeratedValueType" minOccurs="1" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="fieldType">
    <xsd:sequence>
      <xsd:group    ref="dimElementGroup" minOccurs="0"/>
      <!-- name specifies a field's name. The System Viewer and the device header file will
           use the name of the field as identifier -->
      <xsd:element name="name" type="dimableIdentifierType"/>
      <!-- description contains reference manual level information about the function and
           options of a field -->
      <xsd:element name="description" type="stringType" minOccurs="0"/>
      <!-- alternative specifications of the bit position of the field within the register -->
      <xsd:choice minOccurs="1" maxOccurs="1">
        <!-- bit field described by lsb followed by msb tag -->
        <xsd:group ref="bitRangeLsbMsbStyle"/>
        <!-- bit field described by bit offset relative to Bit0 + bit width of field -->
        <xsd:group ref="bitRangeOffsetWidthStyle"/>
        <!-- bit field described by [<msb>:<lsb>] -->
        <xsd:element name="bitRange" type="bitRangeType"/>
      </xsd:choice>
      <!-- access describes the predefined permissions for the field. -->
      <xsd:element name="access" type="accessType" minOccurs="0"/>
      <!-- predefined description of write side effects -->
      <xsd:element name="modifiedWriteValues" type="modifiedWriteValuesType" minOccurs="0"/>
      <!-- writeContstraint specifies the subrange of allowed values -->
      <xsd:element name="writeConstraint" type="writeConstraintType" minOccurs="0"/>
      <!-- readAction specifies the read side effects. -->
      <xsd:element name="readAction" type="readActionType" minOccurs="0"/>
      <!-- enumeratedValues derivedFrom=<identifierType> -->
      <xsd:element name="enumeratedValues" type="enumerationType" minOccurs="0" maxOccurs="2">
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="derivedFrom" type="dimableIdentifierType" use="optional"/>
  </xsd:complexType>

  <xsd:complexType name="fieldsType">
    <xsd:sequence>
      <!-- field derivedFrom=<identifierType> -->
      <xsd:element name="field" type="fieldType" minOccurs="1" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="registerType">
    <xsd:sequence>
      <xsd:group    ref="dimElementGroup" minOccurs="0"/>
      <!-- name specifies the name of the register. The register name is used by System Viewer and
                                     device header file generator to represent a register -->
      <xsd:element name="name" type="dimableIdentifierType"/>
      <!-- display name specifies a register name without the restritions of an ANSIS C identifier.
                                     The use of this tag is discouraged because it does not allow consistency between
                                     the System View and the device header file. -->
      <xsd:element name="displayName" type="stringType" minOccurs="0"/>
      <!-- description contains a reference manual level description about the register and it's purpose -->
      <xsd:element name="description" type="stringType" minOccurs="0"/>
      <xsd:choice>
        <!-- alternateGroup specifies the identifier of the subgroup a register belongs to.
                                       This is useful if a register has a different description per mode but a single name -->
        <xsd:element name="alternateGroup" type="identifierType" minOccurs="0"/>
        <!-- V1.1: alternateRegister specifies an alternate register description for an address that is
                                       already fully described. In this case the register name must be unique within the peripheral -->
        <xsd:element name="alternateRegister" type="dimableIdentifierType" minOccurs="0"/>
      </xsd:choice>
      <!-- addressOffset describes the address of the register relative to the baseOffset of the peripheral -->
      <xsd:element name="addressOffset" type="scaledNonNegativeInteger"/>
      <!-- registerPropertiesGroup elements specify the default values for register size, access permission and
                                     reset value. These default values are inherited to all fields contained in this register -->
      <xsd:group    ref="registerPropertiesGroup" minOccurs="0"/>
      <!-- V1.1: dataType specifies a CMSIS compliant native dataType for a register (i.e. signed, unsigned, pointer) -->
      <xsd:element name="dataType" type="dataTypeType" minOccurs="0"/>
      <!-- modifiedWriteValues specifies the write side effects -->
      <xsd:element name="modifiedWriteValues" type="modifiedWriteValuesType" minOccurs="0"/>
      <!-- writeConstraint specifies the subset of allowed write values -->
      <xsd:element name="writeConstraint" type="writeConstraintType" minOccurs="0"/>
      <!-- readAcction specifies the read side effects -->
      <xsd:element name="readAction" type="readActionType" minOccurs="0"/>
      <!-- fields section contains all fields that belong to this register -->
      <xsd:element name="fields" type="fieldsType" minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:attribute name="derivedFrom" type="dimableIdentifierType" use="optional"/>
  </xsd:complexType>

  <!-- V1.1: A cluster is a set of registers that are composed into a C data structure in the device header file -->
  <xsd:complexType name="clusterType">
    <xsd:sequence>
      <xsd:group   ref="dimElementGroup" minOccurs="0"/>
      <xsd:element name="name" type="dimableIdentifierType"/>
      <xsd:element name="description" type="xsd:string"/>
      <!-- V1.1: alternateCluster specifies an alternative description for a cluster address range that is
                 already fully described. In this case the cluster name must be unique within the peripheral -->
      <xsd:element name="alternateCluster" type="dimableIdentifierType" minOccurs="0"/>
      <!-- V1.1: headerStructName specifies the name for the cluster structure typedef
                 used in the device header generation instead of the cluster name -->
      <xsd:element name="headerStructName" type="identifierType" minOccurs="0"/>
      <xsd:element name="addressOffset" type="scaledNonNegativeInteger"/>
      <!-- registerPropertiesGroup elements specify the default values for register size, access permission and
                 reset value. These default values are inherited to all registers contained in this peripheral -->
      <xsd:group ref="registerPropertiesGroup" minOccurs="0"/>
      <xsd:sequence>
        <xsd:choice minOccurs="1" maxOccurs="unbounded">
          <xsd:element name="register" type="registerType" minOccurs="0" maxOccurs="unbounded"/>
          <!-- 1.3: nesting of cluster is supported -->
          <xsd:element name="cluster" type="clusterType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
      </xsd:sequence>
    </xsd:sequence>
    <xsd:attribute name="derivedFrom" type="dimableIdentifierType" use="optional"/>
  </xsd:complexType>

  <!-- the registers section can have an arbitrary list of cluster and register sections -->
  <xsd:complexType name="registersType">
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:element name="cluster" type="clusterType"/>
      <xsd:element name="register" type="registerType"/>
    </xsd:choice>
  </xsd:complexType>

  <xsd:complexType name="peripheralType">
    <xsd:sequence>
      <!-- 1.3: specify uni-dimensional array of peripheral - requires name="<name>[%s]" -->
      <xsd:group    ref="dimElementGroup" minOccurs="0"/>
      <!-- name specifies the name of a peripheral. This name is used for the System View and device header file -->
      <xsd:element name="name" type="dimableIdentifierType"/>
      <!-- version specifies the version of the peripheral descriptions -->
      <xsd:element name="version" type="stringType" minOccurs="0"/>
      <!-- description provides a high level functional description of the peripheral -->
      <xsd:element name="description" type="stringType" minOccurs="0"/>
      <!-- V1.1: alternatePeripheral specifies an alternative description for an address range that is
           already fully by a peripheral described. In this case the peripheral name must be unique within the device description -->
      <xsd:element name="alternatePeripheral" type="dimableIdentifierType" minOccurs="0"/>
      <!-- groupName assigns this peripheral to a group of peripherals. This is only used bye the System View -->
      <xsd:element name="groupName" type="xsd:string" minOccurs="0"/>
      <!-- prependToName specifies a prefix that is placed in front of each register name of this peripheral.
                         The device header file will show the registers in a C-Struct of the peripheral without the prefix. -->
      <xsd:element name="prependToName" type="identifierType" minOccurs="0"/>
      <!-- appendToName is a postfix that is appended to each register name of this peripheral. The device header
                         file will sho the registers in a C-Struct of the peripheral without the postfix -->
      <xsd:element name="appendToName" type="identifierType" minOccurs="0"/>
      <!-- V1.1: headerStructName specifies the name for the peripheral structure typedef
                         used in the device header generation instead of the peripheral name -->
      <xsd:element name="headerStructName" type="dimableIdentifierType" minOccurs="0"/>
      <!-- disableCondition contains a logical expression based on constants and register or bit-field values
                         if the condition is evaluated to true, the peripheral display will be disabled -->
      <xsd:element name="disableCondition" type="stringType" minOccurs="0"/>
      <!-- baseAddress specifies the absolute base address of a peripheral. For derived peripherals it is mandatory
                         to specify a baseAddress. -->
      <xsd:element name="baseAddress" type="scaledNonNegativeInteger"/>
      <!-- registerPropertiesGroup elements specify the default values for register size, access permission and
                         reset value. These default values are inherited to all registers contained in this peripheral -->
      <xsd:group ref="registerPropertiesGroup" minOccurs="0"/>
      <!-- addressBlock specifies one or more address ranges that are assigned exclusively to this peripheral.
                         derived peripherals may have no addressBlock, however none-derived peripherals are required to specify
                         at least one address block -->
      <xsd:element name="addressBlock" type="addressBlockType" minOccurs="0" maxOccurs="unbounded"/>
      <!-- interrupt specifies can specify one or more interrtupts by name, description and value -->
      <xsd:element name="interrupt" type="interruptType" minOccurs="0" maxOccurs="unbounded"/>
      <!-- registers section contains all registers owned by the peripheral. In case a peripheral gets derived it does
                        not have its own registers section, hence this section is optional. A unique peripheral without a
                        registers section is not allowed -->
      <xsd:element name="registers" type="registersType" minOccurs="0" maxOccurs="1">
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="derivedFrom" type="dimableIdentifierType" use="optional"/>
  </xsd:complexType>

  <!-- ==================================================== -->
  <!-- The top level element of a description is the device -->
  <!-- ==================================================== -->
  <xsd:element name="device" nillable="true">
    <xsd:complexType>
      <xsd:sequence>
        <!-- V1.1: Vendor Name -->
        <xsd:element name="vendor" type="stringType" minOccurs="0"/>
        <!-- V1.1: Vendor ID - a short name for referring to the vendor (e.g. Texas Instruments = TI) -->
        <xsd:element name="vendorID" type="identifierType" minOccurs="0"/>
        <!-- name specifies the device name being described -->
        <xsd:element name="name" type="identifierType"/>
        <!-- V1.1: series specifies the device series or family name -->
        <xsd:element name="series" type="stringType" minOccurs="0"/>
        <!-- version specifies the version of the device description -->
        <xsd:element name="version" type="stringType"/>
        <!-- description is a string describing the device features (e.g. memory size, peripherals, etc.) -->
        <xsd:element name="description" type="stringType"/>
        <!-- V1.1: licenseText specifies the file header section to be included in any derived file -->
        <xsd:element name="licenseText" type="stringType" minOccurs="0"/>
        <!-- V1.1: cpu specifies the details of the processor included in the device -->
        <xsd:element name="cpu" type="cpuType" minOccurs="0"/>
        <!-- V1.1: the tag specifies the filename without extension of the CMSIS System Device include file.
             This tag is used by the header file generator for customizing the include statement referencing the
             CMSIS system file within the CMSIS device header file. By default the filename is "system_<device.name>"
             In cases a device series shares a single system header file, the name of the series shall be used
             instead of the individual device name. -->
        <xsd:element name="headerSystemFilename" type="identifierType" minOccurs="0"/>
        <!-- V1.1: headerDefinitionPrefix specifies the string being prepended to all names of types defined in
             generated device header file -->
        <xsd:element name="headerDefinitionsPrefix" type="identifierType" minOccurs="0"/>
        <!-- addressUnitBits specifies the size of the minimal addressable unit in bits -->
        <xsd:element name="addressUnitBits" type="scaledNonNegativeInteger"/>
        <!-- width specifies the number of bits for the maximum single transfer size allowed by the bus interface.
             This sets the maximum size of a single register that can be defined for an address space -->
        <xsd:element name="width" type="scaledNonNegativeInteger"/>
        <!-- registerPropertiesGroup elements specify the default values for register size, access permission and
             reset value -->
        <xsd:group ref="registerPropertiesGroup" minOccurs="0"/>

        <!-- peripherals is containing all peripherals -->
        <xsd:element name="peripherals">
          <xsd:complexType>
            <xsd:sequence>
              <xsd:element name="peripheral" type="peripheralType" minOccurs="1" maxOccurs="unbounded"/>
            </xsd:sequence>
          </xsd:complexType>
        </xsd:element>

        <!-- Vendor Extensions: this section captures custom extensions. This section will be ignored by default -->
        <xsd:element name="vendorExtensions" minOccurs="0" maxOccurs="1">
          <xsd:complexType>
            <xsd:sequence>
              <xsd:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded">
              </xsd:any>
            </xsd:sequence>
          </xsd:complexType>
        </xsd:element>
      </xsd:sequence>
      <xsd:attribute name="schemaVersion" type="xsd:decimal" use="required"/>
    </xsd:complexType>
  </xsd:element>
</xsd:schema>

<!-- END OF FILE -->
